from functools import reduce

print('*** Funciones lambda ***')

# Función cuadrado sin lambda
def cuadrado(x):
    return x ** 2

print(f'El cuadrado de 5 es: {cuadrado(5)}')

# Función lambda (anonima)
cuadrado_lambda = lambda x: x ** 2
print(f'El cuadrado con lambda de 10 es: {cuadrado_lambda(10)}')

# Ejemplo con map y lambda
numeros = [1,2,3,4,5]

# Aplicar una función lambda para obtener el cuadrado de cada numero
cuadrados = list(map(lambda x: x ** 2, numeros))
print(f'Resultado de usar map y lambda: {cuadrados}')

# Con filter y lambda
pares = list(filter(lambda x: x % 2 == 0, numeros))
print(f'Resultado de usar filter para filtrar numeros pares: {pares}')

# reduce y map
suma_acumulativa = reduce(lambda x,y: x + y, numeros)
print(f'La suma acumulativa aplicando reduce: {suma_acumulativa}')